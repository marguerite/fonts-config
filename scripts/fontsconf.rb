module FontsConf

  # common emojis that almost every font has
  # "#","*","0","1","2","3","4","5","6","7","8","9","©","®","™"," ",
  # "‼","↔","↕","↖","↗","↘","↙","▪","▫","☀","⁉","ℹ",
  # "▶","◀","☑","↩","↪","➡","⬅","⬆","⬇","♀","♂"
  COMMON = ["0","20","23","2a","30","31","32","33","34","35","36","37",
            "38","39","a9","ae","200d","203c","2049","20e3","2122",
            "2139","2194","2195","2196","2197","2198","2199","21a9",
            "21aa","25aa","25ab","25b6","25c0","2600","2611","2640",
            "2642","27a1","2b05","2b06","2b07"].freeze

  def build_charset(font)
    charset = []
    cmd = `fc-scan --format "%{charset}" #{font}`
    cmd.split(' ').each do |i|
      if i.index('-')
        extract_range(i).each { |j| charset << j }
      else
        charset << i
      end
    end
    charset
  end

  def build_emoji_charset(font)
    build_charset(font).reject { |i| COMMON.include?(i) }
  end

  def sort_charset(charset)
    charset.uniq.sort {|x,y| ("0x" + x).hex <=> ("0x" + y).hex }
  end

  def intersect_charset(charset, emoji)
    charset.select {|i| emoji.include?(i)}
  end

  def ranged_charset(charset)
    res = []
    start = nil
    # ["0","200d","1f8e0", "1f8e1" "1f9c0"]
    charset.each_with_index do |v, idx|
      if idx.zero?
        if charset.size == 1 || substract_hex(charset[1], v) > 1
          res << v
        end
        next
      end
      if idx == charset.size - 1
        if start && substract_hex(v, charset[idx - 1]) == 1
          res << start + ".." + v
        else
          res << v
        end
        break
      end
      if substract_hex(charset[idx + 1], v) == 1
        start = v if start.nil?
      else
        if start
          res << start + ".." + v
          start = nil
        else
          res << v
        end
      end
    end
    res
  end

  def print_preamble(prgname)
    "<?xml version=\"1.0\" ?>\n" +
    "<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n" +
    "<fontconfig>\n" +
    "<!-- Do not edit. Generated by #{prgname}. -->\n"
  end

  def print_charset(charset, prefix)
    str = ""
    str += "#{prefix}  <charset>\n"
    charset.each do |c|
      if c.index('..')
        str += "#{prefix}    <range>\n"
        c.split('..').each do |i|
          str += "#{prefix}      <int>0x#{i}</int>\n"
        end
        str += "#{prefix}    </range>\n"
      else
        str += "#{prefix}    <int>0x#{c}</int>\n"
      end
    end
    str += "#{prefix}  </charset>\n"
    str
  end

  def print_minus_block(fontname, charset)
    str = ""
    str += "  <match target=\"scan\">\n"
    str += "    <test name=\"family\">\n"
    str += "      <string>#{fontname}</string>\n"
    str += "    </test>\n"
    str += "    <edit name=\"charset\" mode=\"assign\">\n"
    str += "      <minus>\n"
    str += "        <name>charset</name>\n"
    str += print_charset(charset, " " * 6)
    str += "      </minus>\n"
    str += "    </edit>\n"
    str += "  </match>\n"
    str
  end

  private

  def extract_range(range)
    r = /^(\w+)-(\w+)$/
    out = []
    if range =~ r
      s = Regexp.last_match(1)
      e = Regexp.last_match(2)

      out << s
      t = ('0x' + e).hex - ('0x' + s).hex
      unless t < 2
        i = 1
        (t - 1).times do
          out << (('0x' + s).hex + i).to_s(16)
          i += 1
        end
      end
      out << e
    end
    out
  end

  def substract_hex(x, y)
    ("0x" + x).hex - ("0x" + y).hex
  end
end
